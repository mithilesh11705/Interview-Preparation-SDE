class Solution {
  public:
  
    void dfs(int node, vector<vector<pair<int,int>>>& adj, vector<int>& vis, stack<int>& st)
    {
        vis[node] = 1;
        
        for(auto adjn : adj[node])
        {
            int v = adjn.first;
            if(!vis[v])
            {
                dfs(v, adj, vis, st);
            }
        }
        
        st.push(node);
    }
    
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
        vector<vector<pair<int,int>>> adj(V);
        
        for(auto it : edges)
        {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            
            adj[u].push_back({v, wt});
        }
        
        vector<int> vis(V, 0);
        stack<int> st;
        
        for(int i = 0; i < V; i++)
        {   
            if(!vis[i])
            {
                dfs(i, adj, vis, st);
            }
        }
        
        vector<int> dist(V, INT_MAX);
        dist[0] = 0;
        
        while(!st.empty())
        {
            int k = st.top();
            st.pop();
            
            if (dist[k] != INT_MAX)
            {
                for(auto it : adj[k])
                {
                    int v = it.first;
                    int wt = it.second;
                    
                    if(wt + dist[k] < dist[v])
                    {
                        dist[v] = wt + dist[k];
                    }
                }
            }
        }
        
        
        for(int i = 0; i < V; i++)
        {
            if(dist[i] == INT_MAX)
                dist[i] = -1;
        }
        
        return dist;
    }
};
