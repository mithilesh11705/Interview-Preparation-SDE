#include <vector>
#include <queue>
using namespace std;

class Solution {
  public:
    vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
        // Create adjacency list
        vector<vector<pair<int, int>>> adj(V);
        
        for (auto edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            
            adj[u].push_back({v, w});
            // If undirected graph, also add: adj[v].push_back({u, w});
        }
        
        // Min-heap priority queue: (distance, node)
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        vector<int> dist(V, 1e9);
        dist[src] = 0;
        pq.push({0, src});
        
        while (!pq.empty()) {
            int wt = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            
            for (auto adjn : adj[node]) {
                int ed = adjn.first;
                int edwt = adjn.second;
                
                if (wt + edwt < dist[ed]) {
                    dist[ed] = wt + edwt;
                    pq.push({dist[ed], ed});
                }
            }
        }
        
        return dist;
    }
};
