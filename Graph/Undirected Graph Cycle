class Solution {
  public:
    
    bool checkCycle(int node,vector<vector<int>>& adj,vector<int>& vis)
    {
        vis[node]=1;
        
        queue<pair<int,int>>q;
        q.push({node,-1});
    
        while(!q.empty())
        {
            int n=q.front().first;
            int parent=q.front().second;
            q.pop();
            
            for(auto adjnode:adj[n])
            {
                if(!vis[adjnode])
                {
                    vis[adjnode]=1;
                    q.push({adjnode,n});
                }
                else if(parent!=adjnode)
                {
                    return true;
                }
            }
        }
        return false;
    }
  
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<vector<int>> adjList(V);
        vector<int>vis(V,0);
        
        
         for (auto &edge : edges) {
        int u = edge[0];
        int v = edge[1];

        adjList[u].push_back(v);
        adjList[v].push_back(u);  
    }
    
    for(int i=0;i<V;i++){
        
        if(!vis[i])
        {
            if(checkCycle(i,adjList,vis))
            return true;
        }
    }
    return false;
    }
};