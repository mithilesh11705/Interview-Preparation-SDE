
class Solution {
  public:
    int MinimumEffort(int rows, int columns, vector<vector<int>> &heights) {
        // code here

        int n = rows, m = columns;

        vector<vector<int>> dist(n, vector<int>(m, 1e9));

        
        priority_queue< pair<int, pair<int, int>> , vector<pair<int, pair<int, int>>> , greater<pair<int, pair<int, int>>>> pq;

        pq.push({0, { 0, 0 }});
        dist[0][0] = 0;

        
        int dr[] = { -1, 0, 1, 0};
        int dc[] = { 0, 1, 0, -1};

        
        while( !pq.empty() ){

            int diff = pq.top().first;
            int r = pq.top().second.first;
            int c = pq.top().second.second;

            pq.pop();

            if(r == n - 1 && c == m - 1){ return diff; } 

            for(int i = 0; i < 4; i++){

                int nr = r + dr[i];
                int nc = c + dc[i];

                if( nr >= 0 && nc >= 0 && nr < n && nc < m ){

                    int new_effort = max ( abs(heights[nr][nc] - heights[r][c]), diff);
                    
                    if( new_effort <  dist[nr][nc]){
                        dist[nr][nc] = new_effort;
                        pq.push({ new_effort, {nr, nc}});
                    }
                }
            }
        }

        return 0;
    }
};
