class Solution
{
public:
    bool isSubsetSum(vector<int> &arr, int sum)
    {
        // code here

        int n = arr.size();

        int t[n + 1][sum + 1];
        for (int i = 0; i <= n; i++)
        {
            for (int j = 0; j <= sum; j++)
            {
                if (i == 0)
                {
                    t[i][j] = false;
                }
                if (j == 0)
                {
                    t[i][j] = true;
                }
            }
        }

        for (int i = 1; i <= n; i++)
        {
            for (int j = 0; j <= sum; j++)
            {
                if (arr[i - 1] <= j)
                {
                    t[i][j] = (t[i - 1][j - arr[i - 1]] || t[i - 1][j]);
                }
                else
                    t[i][j] = t[i - 1][j];
            }
        }

        return t[n][sum];
    }
    bool canPartition(vector<int> &nums)
    {
        int totalSum = 0;
        for (int num : nums)
            totalSum += num;

        if (totalSum % 2 != 0)
            return false;
        else
        {
            return isSubsetSum(nums, totalSum / 2);
        }
    }
};