Same as Count Subsets with Min difference


class Solution {
public:
    // int help(vector<int>& arr, int n, int s, vector<vector<int>>& dp) {
    //     if (n == 0) return (s == 0) ? 1 : 0;

    //     if (dp[n][s] != -1)
    //         return dp[n][s];

    //     if (arr[n-1] <= s)
    //         return dp[n][s] = help(arr, n-1, s - arr[n-1], dp) + help(arr, n-1, s, dp);
    //     else
    //         return dp[n][s] = help(arr, n-1, s, dp);
    // }

    int countPartitions(vector<int>& arr, int d) {
        int s = accumulate(arr.begin(), arr.end(), 0);
        
        if ((s + d) % 2 != 0) return 0; // must be even
        int k = (s + d) / 2;

        int n = arr.size();
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, -1));
        // return help(arr, n, k, dp);
        
       for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= k; j++) {
        if (i == 0 && j == 0)
            dp[i][j] = 1;
        else if (i == 0)
            dp[i][j] = 0;
        else if (j == 0)
            dp[i][j] = 1;
    }
}
        
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=k;j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j]=dp[i-1][j-arr[i-1]]+dp[i-1][j];
                }
                else
                dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][k];
    }
};
