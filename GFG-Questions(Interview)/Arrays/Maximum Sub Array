class Solution {
  public:
    vector<int> findSubarray(vector<int>& arr) {
        int n = arr.size();
        vector<int> pref(n, 0);

     
        for (int i = 0; i < n; i++) {
            if (arr[i] < 0) {
                pref[i] = 0;
            } else if (i == 0 || arr[i - 1] < 0) {
                pref[i] = arr[i];
            } else {
                pref[i] = pref[i - 1] + arr[i];
            }
        }

        int i = 0, j = 0;
        long long maxs = LLONG_MIN;
        int ir = -1, ij = -1;

       
        while (j < n) {
            if (arr[j] >= 0) {
            
                if (pref[j] > maxs || 
                   (pref[j] == maxs && (j - i) > (ij - ir))) {
                    maxs = pref[j];
                    ir = i;
                    ij = j;
                }
                j++;
            } else {
                j++;
                i = j; /
            }
        }

        if (ir == -1) return {-1};

        vector<int> ans;
        for (int k = ir; k <= ij; k++) ans.push_back(arr[k]);
        return ans;
    }
};
