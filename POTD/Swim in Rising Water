class Solution {
public:
    int n;
    bool dfs(int i,int j,int t,vector<vector<bool>>& vis,vector<vector<int>>& grid)
    {
        if(i>=n || i<0 || j>=n || j<0) return false;
        if(vis[i][j] || grid[i][j]>t) return false;
        if(i==n-1 && j==n-1) return true;

        vis[i][j]=true;
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};

        for(int k=0;k<4;k++)
        {
             if(dfs(i+dr[k],j+dc[k],t,vis,grid))
             return true;
        }

        return false;

    }
    int swimInWater(vector<vector<int>>& grid) {
         n=grid.size();

       
        int low=grid[0][0],high=n*n-1,ans=high;
        while(low<=high)
        {
            int mid = (low + high) / 2;
             vector<vector<bool>>vis(n,vector<bool>(n,false));
            if(dfs(0,0,mid,vis,grid))
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans;
    }
};
