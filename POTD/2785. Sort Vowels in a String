class Solution {
public:
    string sortVowels(string s) {
        vector<char> vowels;
        for (char c : s) {
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||
                c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                vowels.push_back(c);
            }
        }
        sort(vowels.begin(), vowels.end());
        int i = 0, j = 0;
        while (i < s.size() && j < vowels.size()) {
            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||
                s[i] == 'u' || s[i] == 'A' || s[i] == 'E' || s[i] == 'I' ||
                s[i] == 'O' || s[i] == 'U') {
                s[i] = vowels[j];
                j++;
            }
            i++;
        }
        return s;
    }
};



We are asked to sort only the vowels of the string in ascending order, while keeping the consonants and other characters in their original positions.

Example:
s = "leetcode"
Vowels = ['e','e','o','e'] → sorted = ['e','e','e','o']
Final ="leetcedo"

⚙️Intuition & Approach
1. Extract vowels:
Traverse the string and collect all vowels (a, e, i, o, u + uppercase variants) into a separate list.
Example: "leetcode" → vowels = ['e','e','o','e'].
2. Sort vowels:
Sort the collected vowels in ascending lexicographic order.
"leetcode" → sorted vowels = ['e','e','e','o'].
3. Reconstruct the string:
Traverse the original string again.
Whenever a vowel is encountered, replace it with the next vowel from the sorted list.
Keep consonants unchanged.
Result: "leetcedo".
This works because we are only touching the vowels — consonants stay where they are.