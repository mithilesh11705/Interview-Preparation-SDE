class Solution {
public:
    void backtrack(vector<int>& arr, vector<bool>& used, vector<int>& curr, vector<vector<int>>& res) {
        if(curr.size() == arr.size()) {
            res.push_back(curr);
            return;
        }

        for(int i = 0; i < arr.size(); i++) {
            // Skip already used element
            if(used[i]) continue;

            if(i > 0 && arr[i] == arr[i-1] && !used[i-1]) continue;

            used[i] = true;
            curr.push_back(arr[i]);

            backtrack(arr, used, curr, res);

            curr.pop_back();
            used[i] = false;
        }
    }

    vector<vector<int>> uniquePerms(vector<int>& arr) {
        sort(arr.begin(), arr.end());  // important for duplicate handling
        vector<vector<int>> res;
        vector<int> curr;
        vector<bool> used(arr.size(), false);

        backtrack(arr, used, curr, res);
        return res;
    }
};

