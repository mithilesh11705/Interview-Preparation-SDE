/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    //  void recursion(TreeNode* root,int level,vector<int> &res)
    // {
    //     if(root==NULL) return ;
    //     if(res.size()==level) res.push_back(root->val);
    //     recursion(root->right,level+1,res);
    //     recursion(root->left,level+1,res);; 
    // }
public:
    vector<int> rightSideView(TreeNode* root) {
        if(root==NULL) return {};
         vector<vector<int>>res;
        // recursion(root,0,res);
        // return res;
        
        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty())
        {
            vector<int>ans;
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                TreeNode* r=q.front();
                q.pop();
                
                if(r->left!=NULL) q.push(r->left);
                if(r->right!=NULL) q.push(r->right);

                ans.push_back(r->val);
            }
            res.push_back(ans);
        }
        vector<int>sol;
        for(auto it:res)
        {
            int n=it.size();
            for(int i=0;i<n;i++)
            {
                if(i==n-1) sol.push_back(it[i]);
            }
        }
        return sol;
    }
   
};