class Solution {
  public:
 
      void nextGreater(vector<int>& arr ,vector<int>& NGE , int n){
        stack<int>s;
        for(int i = n-1 ; i>=0 ;i--){
            while(!s.empty() && arr[s.top()] <= arr[i]){
                s.pop();
            }
            if(!s.empty()){
                NGE[i] = s.top();
            }
            s.push(i);
        }
    }
    
  void prevGreter(vector<int>& arr ,vector<int>& PGE , int n){
        stack<int>s;
        for(int i = 0 ; i < n ;i++){
            while(!s.empty() && arr[s.top()] <= arr[i]){
                s.pop();
            }
            if(!s.empty()){
                PGE[i] = s.top();
            }
            s.push(i);
        }
    }
    
    int longestSubarray(vector<int>& arr) {
        // code here
        int longest=0;
        int n = arr.size();
        
        vector<int>PGE(n,-1);
        vector<int>NGE(n,n);
        
        nextGreater(arr,NGE,n);
        prevGreter(arr,PGE,n);
        
        int len=0;
        
        for(int i=0 ; i < n ; i++){
            int windLen =  NGE[i]-PGE[i]-1;
            if(arr[i] <= windLen){
                len = max( len ,windLen);
            }
        }
        
        return len;
    }
};