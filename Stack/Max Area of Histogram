class Solution {
public:
    vector<int> nsl(vector<int>& arr) {
        int n = arr.size();
        stack<pair<int,int>> st;
        vector<int> res;

        for (int i = 0; i < n; i++) {
            if (st.empty()) {
                res.push_back(-1);
            }
            else if (arr[i] <= st.top().first) {
                while (!st.empty() && arr[i] <= st.top().first) {
                    st.pop();
                }
                if (st.empty()) {
                    res.push_back(-1);
                } else {
                    res.push_back(st.top().second);
                }
            }
            else {
                res.push_back(st.top().second);
            }
            st.push({arr[i], i});
        }
        return res;
    }

    vector<int> nsr(vector<int>& arr) {
        int n = arr.size();
        stack<pair<int,int>> st;
        vector<int> res(n);

        for (int i = n - 1; i >= 0; i--) {
            if (st.empty()) {
                res[i] = n;
            }
            else if (arr[i] <= st.top().first) {
                while (!st.empty() && arr[i] <= st.top().first) {
                    st.pop();
                }
                if (st.empty()) {
                    res[i] = n;
                } else {
                    res[i] = st.top().second;
                }
            }
            else {
                res[i] = st.top().second;
            }
            st.push({arr[i], i});
        }
        return res;
    }

    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> left = nsl(heights);
        vector<int> right = nsr(heights);

        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int width = right[i] - left[i] - 1;
            int area = heights[i] * width;
            maxArea = max(maxArea, area);
        }
        return maxArea;
    }
};
