class Solution {
public:
    int atMost(vector<int>& nums, int k) {
        int n = nums.size();
        int i = 0, res = 0;
        unordered_map<int, int> mp;

        for (int j = 0; j < n; j++) {
            mp[nums[j]]++;

            while (mp.size() > k) {
                mp[nums[i]]--;
                if (mp[nums[i]] == 0)
                    mp.erase(nums[i]);
                i++;
            }

            res += (j - i + 1);
        }
        return res;
    }

    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return atMost(nums, k) - atMost(nums, k - 1);
    }
};
 



Whenver asked about exactly k distinct integers in a subarray, we can use the logic of - subarrays with ≤ k distinct integers - subarrays with ≤ k-1 distinct integers
This gives us the count of subarrays with exactly k distinct integers.